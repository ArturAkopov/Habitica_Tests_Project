plugins {
    id 'java-library'
    id 'io.qameta.allure' version '2.11.2'
    id 'io.freefair.lombok' version "8.6"
}

def allureVersion = "2.27.0",
    restAssuredVersion = "5.4.0",
    selenideVersion = "6.13.0",
    junitVersion = "5.10.2",
    slf4jVersion = "2.0.7",
    ownerVersion = "1.0.4",
    assertjVersion = "3.25.3",
    javafakerVersion = "1.0.2",
    appiumVersion = "8.4.0",
    commons_ioVersion = "2.11.0"


allure
        {
            report {
                version.set(allureVersion)
            }
            adapter {
                aspectjWeaver.set(true)
                frameworks {
                    junit5 {
                        adapterVersion.set(allureVersion)
                    }
                }
            }
        }

repositories {
    mavenCentral()
}

compileJava {
    options.encoding = 'UTF-8'
}
compileTestJava {
    options.encoding = 'UTF-8'
}

dependencies {
    testImplementation(
            "org.junit.jupiter:junit-jupiter:$junitVersion",
            "org.slf4j:slf4j-simple:$slf4jVersion",
            "org.slf4j:slf4j-api:$slf4jVersion",
            "com.codeborne:selenide:$selenideVersion",
            "io.rest-assured:rest-assured:$restAssuredVersion",
            "io.rest-assured:json-schema-validator:$restAssuredVersion",
            "io.qameta.allure:allure-rest-assured:$allureVersion",
            "io.qameta.allure:allure-selenide:$allureVersion",
            "org.aeonbits.owner:owner:$ownerVersion",
            "org.assertj:assertj-core:$assertjVersion",
            "com.github.javafaker:javafaker:$javafakerVersion",
            "io.appium:java-client:$appiumVersion",
            "commons-io:commons-io:$commons_ioVersion"
    )
}

tasks.withType(Test) {
    systemProperties(System.getProperties())
    useJUnitPlatform()

    testLogging {
        lifecycle {
            events "started", "skipped", "failed", "standard_error", "standard_out"
            exceptionFormat "short"
        }
    }
}

task api(type: Test) {
    useJUnitPlatform {
        includeTags("api")
    }
}

task mobile(type: Test) {
    useJUnitPlatform {
        includeTags("mobile")
    }
}

task web(type: Test) {
    useJUnitPlatform {
        includeTags("web")
    }
}
